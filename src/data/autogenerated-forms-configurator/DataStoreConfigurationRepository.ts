import { DataStoreConfigurationRepository } from "../../domain/autogenerated-forms-configurator/repositories/DataStoreConfigurationRepository";
import { D2Api } from "../../types/d2-api";
import { DataSet } from "../../domain/autogenerated-forms-configurator/entities/DataSet";
import _ from "lodash";
import { Namespaces } from "../common/clients/storage/Namespaces";

export class Dhis2DataStoreConfigurationRepository implements DataStoreConfigurationRepository {
    constructor(private api: D2Api) {}

    async getFormConfig(namespace: string) {
        return await this.api.dataStore(Namespaces.D2_AUTOGEN_FORMS).get<any>(namespace).getData();
    }

    async saveFormConfig(namespace: string, config: any) {
        return await this.api.dataStore(Namespaces.D2_AUTOGEN_FORMS).save(namespace, config).getData();
    }

    async getDatasets(): Promise<DataSet[]> {
        const { dataSets } = await this.api
            .get<{ dataSets: DataSet[] }>("/dataSets", {
                fields: "id,name,code,sections[id,code,dataElements[id,code,optionSet[id,code]]],dataSetElements[dataElement[id,code,optionSet[id,code]],categoryCombo[id,code]]",
                filter: ["name:ilike:MAL", "name:ilike:NHWA"],
                paging: false,
                rootJunction: "OR",
            })
            .getData();

        return dataSets
            .filter(dataSet => {
                const hasDSCode = dataSet.code !== undefined;
                const hasSectionCode = !_(dataSet.sections)
                    .map(section => section.code)
                    .compact()
                    .isEmpty();

                return hasDSCode && hasSectionCode;
            })
            .map(dataSet => ({
                ...dataSet,
                dataSetElements: _(dataSet.dataSetElements)
                    .filter(
                        dataSetElement =>
                            _.size(dataSetElement.categoryCombo) > 0 || _.size(dataSetElement.dataElement) > 0
                    )
                    .value(),
            }));
    }

    async getConstants(): Promise<string[]> {
        const { constants } = await this.api
            .get<{ constants: { code: string }[] }>("/constants?fields=id,code")
            .getData();

        return constants.filter(constant => constant.code).map(constant => constant.code);
    }
}
