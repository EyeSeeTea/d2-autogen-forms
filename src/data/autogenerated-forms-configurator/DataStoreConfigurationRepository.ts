import { DataStoreConfigurationRepository } from "../../domain/autogenerated-forms-configurator/repositories/DataStoreConfigurationRepository";
import { D2Api } from "../../types/d2-api";
import { DataSet, AutogenConfigSchema } from "../../domain/autogenerated-forms-configurator/entities/DataSet";
import _ from "lodash";
import { Namespaces } from "../common/clients/storage/Namespaces";
import { Maybe } from "../../utils/ts-utils";
import { AutogenConfig } from "../../domain/autogenerated-forms-configurator/entities/AutogenConfig";

export class Dhis2DataStoreConfigurationRepository implements DataStoreConfigurationRepository {
    constructor(private api: D2Api) {}

    async getFormConfig(namespace: string): Promise<AutogenConfig> {
        return (
            (await this.api.dataStore(Namespaces.D2_AUTOGEN_FORMS).get<AutogenConfig>(namespace).getData()) ?? {
                categoryCombinations: {},
                dataElements: {},
                dataSets: {},
            }
        );
    }

    async saveFormConfig(namespace: string, config: AutogenConfig): Promise<void> {
        return await this.api.dataStore(Namespaces.D2_AUTOGEN_FORMS).save(namespace, config).getData();
    }

    async getDataSets(): Promise<DataSet[]> {
        const { dataSets } = await this.api.metadata
            .get({
                dataSets: {
                    fields: {
                        id: true,
                        name: true,
                        code: true,
                        sections: {
                            id: true,
                            code: true,
                            dataElements: {
                                id: true,
                                code: true,
                                optionSet: {
                                    id: true,
                                    code: true,
                                },
                            },
                        },
                        dataSetElements: {
                            dataElement: {
                                id: true,
                                code: true,
                                optionSet: {
                                    id: true,
                                    code: true,
                                },
                            },
                            categoryCombo: {
                                id: true,
                                code: true,
                            },
                        },
                    },
                    filter: {
                        name: {
                            ilike: "MAL",
                        },
                    },
                    paging: false,
                    rootJunction: "OR",
                },
            })
            .getData();

        return dataSets
            .filter(dataSet => {
                const hasDSCode = dataSet.code !== undefined;
                const hasSectionCode = !_(dataSet.sections)
                    .map(section => section.code)
                    .compact()
                    .isEmpty();

                return hasDSCode && hasSectionCode;
            })
            .map(dataSet => ({
                ...dataSet,
                dataSetElements: _(dataSet.dataSetElements)
                    .filter(
                        dataSetElement =>
                            _.size(dataSetElement.categoryCombo) > 0 || _.size(dataSetElement.dataElement) > 0
                    )
                    .value(),
            }));
    }

    async getSelectedDataSet(dataSets: DataSet[], dataSetId: Maybe<string>): Promise<AutogenConfigSchema> {
        const constants = await this.getConstants();
        const dataSet = _.find(dataSets, { id: dataSetId });
        if (!dataSetId || !dataSet)
            return { dsCode: "", sectionCodes: [], categoryComboCodes: [], dataElements: [], constants: [] };

        const sectionDEs = _(dataSet.sections)
            .flatMap(section =>
                section.dataElements.map(dataElement => ({
                    dataElementCode: dataElement.code,
                    optionSetCode: dataElement.optionSet?.code,
                }))
            )
            .value();

        const dataSetDEs = _(dataSet.dataSetElements)
            .map(dataSetElement => ({
                dataElementCode: dataSetElement.dataElement?.code,
                optionSetCode: dataSetElement.dataElement.optionSet?.code,
            }))
            .value();

        const dataElements = _.uniqBy(_.concat(sectionDEs, dataSetDEs), "dataElementCode");
        const sectionCodes = dataSet.sections.map(section => section.code);
        const categoryComboCodes = _(dataSet.dataSetElements)
            .map(dataSetElement => dataSetElement.categoryCombo?.code)
            .compact()
            .uniq()
            .value();

        return {
            dsCode: dataSet.code,
            sectionCodes: sectionCodes,
            categoryComboCodes: categoryComboCodes,
            dataElements: dataElements,
            constants: constants,
        };
    }

    private async getConstants(): Promise<string[]> {
        const { constants } = await this.api.metadata.get({ constants: { fields: { code: true } } }).getData();

        return constants.filter(constant => constant.code).map(constant => constant.code);
    }
}
