import _ from "lodash";
import { DataSet } from "../../domain/autogenerated-forms-configurator/entities/DataSet";
import { DataSetRepository } from "../../domain/autogenerated-forms-configurator/repositories/DataSetRepository";
import { D2Api } from "../../types/d2-api";

export class Dhis2DataSetRepository implements DataSetRepository {
    constructor(private api: D2Api) {}

    async get(): Promise<DataSet[]> {
        const dataSets = await this.getMetadata();

        return dataSets
            .filter(dataSet => {
                const hasDSCode = dataSet.code !== undefined;
                const hasSectionCode = !_(dataSet.sections)
                    .map(section => section.code)
                    .compact()
                    .isEmpty();

                return hasDSCode && hasSectionCode;
            })
            .map(dataSet => ({
                ...dataSet,
                dataSetElements: _(dataSet.dataSetElements)
                    .filter(
                        dataSetElement =>
                            _.size(dataSetElement.categoryCombo) > 0 || _.size(dataSetElement.dataElement) > 0
                    )
                    .value(),
            }));
    }

    private async getMetadata() {
        const { objects: dataSets } = await this.api.models.dataSets
            .get({
                fields: dataSetFields,
                paging: false,
            })
            .getData();

        return dataSets;
    }
}

const dataSetFields = {
    name: true,
    code: true,
    sections: {
        code: true,
        dataElements: {
            code: true,
            optionSet: {
                code: true,
            },
            categoryCombo: {
                code: true,
                categoryOptionCombos: {
                    code: true,
                    name: true,
                },
            },
        },
    },
    dataSetElements: {
        dataElement: {
            code: true,
            optionSet: {
                code: true,
            },
        },
        categoryCombo: {
            code: true,
            categoryCombo: {
                categoryOptionCombos: {
                    code: true,
                    name: true,
                },
            },
        },
    },
};
