import { DataStoreConfigurationRepository } from "../../domain/autogenerated-forms-configurator/repositories/DataStoreConfigurationRepository";
import { D2Api } from "../../types/d2-api";
import { DataSet } from "../../domain/autogenerated-forms-configurator/entities/DataSet";
import _ from "lodash";

export class Dhis2DataStoreConfigurationRepository implements DataStoreConfigurationRepository {
    constructor(private api: D2Api) {}

    async getFormConfig(namespace: string) {
        return await this.api.dataStore("d2-autogen-forms").get<any>(namespace).getData();
    }

    async saveFormConfig(namespace: string, config: any) {
        return await this.api.dataStore("d2-autogen-forms").save(namespace, config).getData();
    }

    async getDatasets(): Promise<DataSet[]> {
        const { dataSets } = await this.api
            .get<{ dataSets: DataSet[] }>("/dataSets", {
                fields: "id,name,code,sections[id,code]",
                filter: ["name:ilike:MAL", "name:ilike:NHWA"],
                paging: false,
                rootJunction: "OR",
            })
            .getData();

        return dataSets.filter(dataSet => {
            const hasDSCode = dataSet.code !== undefined;
            const hasSectionCode = !_.isEmpty(
                _(dataSet.sections)
                    .map(section => section.code)
                    .compact()
                    .value()
            );

            return hasDSCode && hasSectionCode;
        });
    }
}
