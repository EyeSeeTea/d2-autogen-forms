import React from "react";
import { SectionSimple } from "../../../domain/common/entities/DataForm";
import { DataFormInfo } from "./AutogeneratedForm";
import { makeStyles } from "@material-ui/core";
import { GridWithCatOptionCombosViewModel } from "./GridWithCatOptionCombosViewModel";
import DataTableSection from "./DataTableSection";
import {
    DataTable,
    DataTableRow,
    TableBody,
    TableHead,
    // @ts-ignore
} from "@dhis2/ui";
import { DataElementItem } from "./DataElementItem";
import { CustomDataTableCell, CustomDataTableColumnHeader } from "./datatables/CustomDataTables";
import { DataTableCellFormula } from "./datatables/DataTableCellFormula";
import { DataTableCellRowTotal } from "./datatables/DataTableCellRowTotal";
import { DataTableCellSummary } from "./datatables/DataTableCellSummary";

export interface GridWithCatOptionCombosProps {
    dataFormInfo: DataFormInfo;
    section: SectionSimple;
}

/*
 * Convert data forms into the default data entry form, using the data elements and category option combinations. 
An example for section ITNs:
 *
 *          Data element                                Category option combos
 *    - ITNs - Basic                            [Public, Private, Community, Combined]
 *    - ITNs - Extended - Written Policy        [Public, Private, Community, Combined]
 *    - ITNs - Extended - Policy Implemented    [Public, Private, Community, Combined]
 *    - ITNs - Extended - Policy Extra          [Public, Private, Community, Combined, default]
 *
 *    This will create this table:
 *
 *
 *                                           |  Public  |  Private  |  Combined  |  Community  |  default
 *    ----------------------------------------------------------------------------------------------------
 *    ITNs - Basic                           |          |           |            |             |
 *                     | Written Policy      |          |           |            |             |
 *    ITNs - Extended  | Policy Implemented  |          |           |            |             |
 *                     | Policy Extra        |          |           |            |             |
 **/

const GridWithCatOptionCombos: React.FC<GridWithCatOptionCombosProps> = props => {
    const { dataFormInfo } = props;
    const classes = useStyles();
    const grid = React.useMemo(() => GridWithCatOptionCombosViewModel.get(props.section), [props.section]);

    const showRowTotals = props.section.showRowTotals;

    return (
        <DataTableSection section={grid} dataFormInfo={dataFormInfo} sectionStyles={props.section.styles}>
            <DataTable className={classes.table} layout="fixed" width="initial">
                <TableHead>
                    <DataTableRow>
                        <CustomDataTableColumnHeader
                            backgroundColor={props.section.styles.columns.backgroundColor}
                            width="400px"
                            colSpan="2"
                        ></CustomDataTableColumnHeader>

                        {grid.columns.map(column => (
                            <CustomDataTableColumnHeader
                                backgroundColor={props.section.styles.columns.backgroundColor}
                                key={column.name}
                            >
                                <div className={classes.header}>
                                    <span>{column.name}</span>
                                    <span className={classes.description}>{column.description}</span>
                                </div>
                            </CustomDataTableColumnHeader>
                        ))}
                        {showRowTotals && (
                            <CustomDataTableColumnHeader
                                backgroundColor={props.section.styles.columns.backgroundColor}
                                key="column-row-totals"
                            >
                                <div dangerouslySetInnerHTML={{ __html: grid.texts.rowTotals || "" }}></div>
                            </CustomDataTableColumnHeader>
                        )}
                    </DataTableRow>
                </TableHead>

                <TableBody>
                    {grid.rows.map(row => {
                        const { groupName, rows } = row;

                        return rows.map((row, idx) => (
                            <DataTableRow key={`${groupName}-${idx}`}>
                                {groupName ? (
                                    <>
                                        {idx === 0 && (
                                            <CustomDataTableCell
                                                backgroundColor={props.section.styles.rows.backgroundColor}
                                                className={classes.rowTitle}
                                                rowSpan={rows.length.toString()}
                                            >
                                                <span>{groupName}</span>
                                            </CustomDataTableCell>
                                        )}

                                        <CustomDataTableCell
                                            backgroundColor={props.section.styles.rows.backgroundColor}
                                        >
                                            <span>{row.deName}</span>
                                        </CustomDataTableCell>
                                    </>
                                ) : (
                                    <CustomDataTableCell
                                        backgroundColor={props.section.styles.rows.backgroundColor}
                                        colSpan="2"
                                    >
                                        <span>{row.deName}</span>
                                    </CustomDataTableCell>
                                )}

                                {grid.columns.map(column => {
                                    const dataElement = column.dataElements.find(de => de.name === row.name);
                                    return dataElement ? (
                                        <CustomDataTableCell
                                            backgroundColor={props.section.styles.rows.backgroundColor}
                                            key={[dataElement.id, column.name].join("-")}
                                        >
                                            <DataElementItem
                                                dataElement={dataElement}
                                                dataFormInfo={dataFormInfo}
                                                noComment
                                            />
                                        </CustomDataTableCell>
                                    ) : (
                                        <CustomDataTableCell
                                            backgroundColor={props.section.styles.rows.backgroundColor}
                                            key={`cell-${idx}-${column.name}`}
                                        ></CustomDataTableCell>
                                    );
                                })}
                                {showRowTotals && (
                                    <DataTableCellRowTotal
                                        dataFormInfo={dataFormInfo}
                                        styles={props.section.styles}
                                        dataElement={row.dataElement}
                                    />
                                )}
                            </DataTableRow>
                        ));
                    })}
                    <DataTableRow key="totals">
                        {grid.summary && (
                            <>
                                <CustomDataTableCell
                                    backgroundColor={props.section.styles.totals.backgroundColor}
                                    key="total-empty-column"
                                ></CustomDataTableCell>
                                <CustomDataTableCell
                                    backgroundColor={props.section.styles.totals.backgroundColor}
                                    key="total-column-name"
                                >
                                    {grid.summary.cellName}
                                </CustomDataTableCell>
                                {grid.summary.cells.map(itemTotal => {
                                    return (
                                        <DataTableCellFormula
                                            key={itemTotal.columnName}
                                            dataFormInfo={dataFormInfo}
                                            styles={props.section.styles}
                                            total={itemTotal}
                                            formula={itemTotal.formula}
                                        />
                                    );
                                })}
                                {showRowTotals && (
                                    <DataTableCellSummary
                                        dataFormInfo={dataFormInfo}
                                        styles={props.section.styles}
                                        dataElements={grid.summary.cells}
                                    />
                                )}
                            </>
                        )}
                    </DataTableRow>
                </TableBody>
            </DataTable>
        </DataTableSection>
    );
};

const useStyles = makeStyles({
    header: {
        fontSize: "1.2em",
        fontWeight: "bold",
        flexDirection: "column",
        textAlign: "center",
        display: "flex",
        padding: "4px",
    },
    description: { fontWeight: "normal", fontSize: "0.8em" },
    table: { borderWidth: "3px !important", minWidth: "100%" },
    rowTitle: { fontSize: "1.2em", fontWeight: "bold" },
});

export default React.memo(GridWithCatOptionCombos);
