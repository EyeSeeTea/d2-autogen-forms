import React from "react";
import _ from "lodash";

import { CellTotal, TotalItem } from "../GridWithCatOptionCombosViewModel";
import { CustomDataTableCell } from "./CustomDataTables";
import { SectionStyle } from "../../../../domain/common/entities/SectionStyle";
import { DataFormInfo } from "../AutogeneratedForm";
import { DataValueNumberSingle } from "../../../../domain/common/entities/DataValue";
import { CustomInput } from "../widgets/NumberWidget";
import { Maybe } from "../../../../utils/ts-utils";

export type DataTableCellSummaryProps = {
    dataElements: CellTotal[];
    styles: SectionStyle;
    dataFormInfo: DataFormInfo;
};

export const DataTableCellSummary: React.FC<DataTableCellSummaryProps> = props => {
    const { dataFormInfo, styles, dataElements } = props;
    const totalCalculated = _(dataElements)
        .flatMap(dataElement => {
            return dataElement.items;
        })
        .map(itemTotal => {
            return getValueFromDataElement(dataFormInfo, itemTotal);
        })
        .compact()
        .sum();

    return (
        <CustomDataTableCell backgroundColor={styles.totals.backgroundColor} key="column-totals">
            <CustomInput value={totalCalculated} disabled readOnly />
        </CustomDataTableCell>
    );
};
export function getValueFromDataElement(dataFormInfo: DataFormInfo, itemTotal: TotalItem): Maybe<number> {
    const dataValue = dataFormInfo.data.values.getOrEmpty(itemTotal.dataElement, {
        categoryOptionComboId: itemTotal.categoryOptionCombo.id,
        orgUnitId: dataFormInfo.orgUnitId,
        period: dataFormInfo.period,
    }) as DataValueNumberSingle;

    const numericValue = Number(dataValue.value);
    return window.isNaN(numericValue) ? undefined : numericValue;
}
