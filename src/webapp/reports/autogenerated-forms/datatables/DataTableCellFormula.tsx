import React from "react";
import _ from "lodash";

import { CellTotal } from "../GridWithCatOptionCombosViewModel";
import { CustomDataTableCell } from "./CustomDataTables";
import { SectionStyle } from "../../../../domain/common/entities/SectionStyle";
import { DataFormInfo } from "../AutogeneratedForm";
import { DataValueNumberSingle } from "../../../../domain/common/entities/DataValue";
import { CustomInput } from "../widgets/NumberWidget";

export type DataTableCellFormulaProps = {
    total: CellTotal;
    styles: SectionStyle;
    dataFormInfo: DataFormInfo;
    formula: string;
};

export const DataTableCellFormula: React.FC<DataTableCellFormulaProps> = props => {
    const { dataFormInfo, formula, styles, total } = props;
    const totalCalculated = _(total.items)
        .map(itemTotal => {
            const dataValue = dataFormInfo.data.values.getOrEmpty(itemTotal.dataElement, {
                categoryOptionComboId: itemTotal.categoryOptionCombo.id,
                orgUnitId: dataFormInfo.orgUnitId,
                period: dataFormInfo.period,
            }) as DataValueNumberSingle;

            const numericValue = Number(dataValue.value);
            return window.isNaN(numericValue) ? undefined : { [itemTotal.dataElement.code]: numericValue };
        })
        .compact()
        .value();

    const compiled = _.template(formula);
    const totalValue = compiled(_.merge({}, ...totalCalculated));

    return (
        <CustomDataTableCell backgroundColor={styles.totals.backgroundColor} key={total.columnName}>
            <CustomInput value={totalValue} disabled readOnly />
        </CustomDataTableCell>
    );
};
