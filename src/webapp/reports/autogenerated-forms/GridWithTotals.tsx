/* eslint-disable @typescript-eslint/no-non-null-assertion */
import React from "react";
import {
    DataTable,
    TableHead,
    DataTableRow,
    DataTableColumnHeader,
    DataTableCell,
    TableBody,
    // @ts-ignore
} from "@dhis2/ui";
import { GridWithTotalsViewModel } from "./GridWithTotalsViewModel";
import { DataFormInfo } from "./AutogeneratedForm";
import { SectionWithTotals } from "../../../../src/domain/common/entities/DataForm";
import { DataElementItem } from "./DataElementItem";
import { makeStyles } from "@material-ui/core";
import DataTableSection from "./DataTableSection";
import { fixHeaderClasses } from "./datatables/CustomDataTables";

export interface GridWithTotalsProps {
    dataFormInfo: DataFormInfo;
    section: SectionWithTotals;
}

const GridWithTotals: React.FC<GridWithTotalsProps> = props => {
    const { dataFormInfo, section } = props;

    const grid = React.useMemo(
        () =>
            GridWithTotalsViewModel.get(
                section,
                dataFormInfo.metadata.dataForm.dataElements,
                dataFormInfo.metadata.dataForm.options.dataElements
            ),
        [section, dataFormInfo.metadata.dataForm.dataElements, dataFormInfo.metadata.dataForm.options.dataElements]
    );
    const classes = useStyles();

    const currentSectionIndex = dataFormInfo.metadata.dataForm.sections.findIndex(
        allSections => allSections.id === section.id
    );
    const notFirstSection = currentSectionIndex !== 0;

    console.log(grid.rows.length, "grid.rows");
    console.log(dataFormInfo.metadata.dataForm.dataElements.length, "dataElements.rows");

    return (
        <DataTableSection section={grid} dataFormInfo={dataFormInfo}>
            <div className={classes.fixedHeaders}>
                <DataTable className={classes.table} layout="fixed" width="initial">
                    <TableHead className={classes.tableHeader}>
                        {grid.parentColumns.length > 0 && (
                            <DataTableRow>
                                <DataTableColumnHeader></DataTableColumnHeader>
                                <DataTableColumnHeader></DataTableColumnHeader>
                                {grid.parentColumns.map(column => {
                                    return (
                                        <DataTableColumnHeader
                                            key={column.name}
                                            className={classes.centerSpan}
                                            colSpan={String(column.colSpan)}
                                        >
                                            <span>{column.name}</span>
                                        </DataTableColumnHeader>
                                    );
                                })}
                                {!notFirstSection && <DataTableColumnHeader></DataTableColumnHeader>}
                            </DataTableRow>
                        )}
                        <DataTableRow>
                            {grid.useIndexes ? (
                                <DataTableColumnHeader width="30px">
                                    <span className={classes.header}>#</span>{" "}
                                </DataTableColumnHeader>
                            ) : (
                                <DataTableColumnHeader></DataTableColumnHeader>
                            )}

                            {notFirstSection ? (
                                <DataTableColumnHeader className={classes.columnWidth} key={`column-Total`}>
                                    <span>Total</span>
                                </DataTableColumnHeader>
                            ) : null}

                            {grid.columns.map(column =>
                                column.deName && column.cocName ? (
                                    <DataTableColumnHeader
                                        key={`column-${column.name}`}
                                        className={classes.columnWidth}
                                    >
                                        <span>{column.cocName}</span>
                                    </DataTableColumnHeader>
                                ) : (
                                    <DataTableColumnHeader
                                        key={`column-${column.name}`}
                                        className={column.isSourceType ? classes.source : classes.columnWidth}
                                    >
                                        <span>{column.name}</span>
                                    </DataTableColumnHeader>
                                )
                            )}
                        </DataTableRow>
                    </TableHead>

                    <TableBody>
                        {grid.rows.map((row, idx) => (
                            <DataTableRow key={`policy-${row.name}`}>
                                <DataTableCell className={classes.td}>
                                    <p
                                        style={{
                                            paddingLeft: row.includePadding ? `${row.includePadding * 10}px` : "0",
                                        }}
                                    >
                                        {grid.useIndexes ? (idx + 1).toString() : row.name}
                                    </p>
                                </DataTableCell>

                                {notFirstSection && row.total ? (
                                    <DataTableCell key={row.total.id + row.total.cocId}>
                                        <DataElementItem
                                            dataElement={row.total}
                                            dataFormInfo={dataFormInfo}
                                            manualyDisabled={true}
                                            noComment={true}
                                        />
                                    </DataTableCell>
                                ) : null}

                                {row.items.map((item, idx) => {
                                    if (item.column.isSourceType) {
                                        return item.dataElement ? (
                                            <DataTableCell key={item.dataElement.id + item.dataElement.cocId}>
                                                <DataElementItem
                                                    dataElement={item.dataElement}
                                                    dataFormInfo={dataFormInfo}
                                                    noComment={false}
                                                    columnTotal={item.columnTotal}
                                                    rows={grid.rows}
                                                />
                                            </DataTableCell>
                                        ) : (
                                            <DataTableCell key={`cell-${idx}`}></DataTableCell>
                                        );
                                    } else {
                                        return item.dataElement ? (
                                            <DataTableCell key={item.dataElement.id + item.dataElement.cocId}>
                                                <DataElementItem
                                                    dataElement={item.dataElement}
                                                    dataFormInfo={dataFormInfo}
                                                    noComment={true}
                                                    manualyDisabled={item.disabled}
                                                    total={row.total}
                                                    columnTotal={item.columnTotal}
                                                    columnDataElements={item.columnDataElements}
                                                    rowName={row.name}
                                                />
                                            </DataTableCell>
                                        ) : (
                                            <DataTableCell key={`cell-${idx}`}></DataTableCell>
                                        );
                                    }
                                })}
                            </DataTableRow>
                        ))}
                    </TableBody>
                </DataTable>
            </div>
        </DataTableSection>
    );
};

const useStyles = makeStyles({
    wrapper: { margin: 10 },
    header: { fontSize: "1.4em", fontWeight: "bold" as const },
    table: { borderWidth: "3px !important", minWidth: "100%" },
    td: { minWidth: "400px !important" },
    columnWidth: { minWidth: "6.2em !important" },
    source: { maxWidth: "35% !important", width: "33% !important", minWidth: "15% !important" },
    centerSpan: {
        "& span": {
            alignItems: "center",
        },
    },
    tableHeader: { position: "sticky", top: 0, zIndex: 2 },
    fixedHeaders: fixHeaderClasses.fixedHeaders,
});

export default React.memo(GridWithTotals);
