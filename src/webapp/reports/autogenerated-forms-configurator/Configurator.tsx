import React, { useEffect, useState } from "react";
import Editor, { Monaco } from "@monaco-editor/react";
import { Dropdown, DropdownProps } from "@eyeseetea/d2-ui-components";
import styled from "styled-components";
import i18n from "../../../locales";
import { Button } from "@material-ui/core";
import { useAppContext } from "../../contexts/app-context";
import { NamedRef } from "../../../domain/common/entities/Ref";
import { DataSet } from "../../../domain/autogenerated-forms-configurator/entities/DataSet";
import { CircularProgress } from "material-ui";

export const actionGlobals = `type Fn<T> = (value: T) => void;
`;

const AutogeneratedFormConfigurator: React.FC = () => {
    const { compositionRoot } = useAppContext();

    const template = `{}`;

    const [selectedDataSet, setSelectedDataSet] = useState<string>("");
    const [dataSets, setDataSets] = useState<DataSet[]>([]);
    const [value = "", setValue] = useState<string | undefined>(template);

    useEffect(() => {
        compositionRoot.dataStoreConfig.getDataSets().then(dataSets => setDataSets(dataSets));
    }, [compositionRoot.dataStoreConfig]);

    useEffect(() => {
        const dsCode = getDataSetCode(dataSets, selectedDataSet);

        compositionRoot.dataStoreConfig
            .getFormConfig(dsCode)
            .then(config => dsCode !== "" && setValue(JSON.stringify(config)));
    }, [compositionRoot.dataStoreConfig, dataSets, selectedDataSet]);

    const dataSetItems = useMemoOptionsFromNamedRef(dataSets);

    const setDataSet = React.useCallback<SingleDropdownHandler>(dataSet => {
        setSelectedDataSet(dataSet ?? "");
    }, []);

    const handleEditorDidMount = (monaco: Monaco) => {
        monaco.languages.typescript.typescriptDefaults.addExtraLib(actionGlobals, "globals.d.ts");
    };

    console.log({
        dataSets,
        selectedDataSet,
        code: getDataSetCode(dataSets, selectedDataSet),
    });

    return (
        <Container>
            <SingleDropdownStyled
                items={dataSetItems}
                value={selectedDataSet}
                onChange={setDataSet}
                label={i18n.t("Data set")}
                hideEmpty
            />

            <StyledEditor
                loading={<CircularProgress />}
                height="80vh"
                width="60vw"
                language="json"
                defaultLanguage="typescript"
                defaultValue="{}"
                value={value}
                onChange={setValue}
                options={{ minimap: { enabled: false } }}
                beforeMount={handleEditorDidMount}
            />

            <ButtonGroup>
                <Button color="primary" variant="contained">
                    Save
                </Button>
                <Button color="default" variant="contained">
                    Cancel
                </Button>
            </ButtonGroup>
        </Container>
    );
};

export default React.memo(AutogeneratedFormConfigurator);

function useMemoOptionsFromNamedRef(options: NamedRef[]) {
    return React.useMemo(() => {
        return options.map(option => ({ value: option.id, text: option.name }));
    }, [options]);
}

function getDataSetCode(dataSets: DataSet[], selectedId: string) {
    return dataSets.find(dataSet => dataSet.id === selectedId)?.code ?? "";
}

const Container = styled.div`
    padding: 20px;
`;

const SingleDropdownStyled = styled(Dropdown)`
    margin-left: -10px;
    width: 50%;
`;

const StyledEditor = styled(Editor)`
    margin: 40px 0 20px;
    grid-area: auto / 1 / auto / auto;
    padding: 20px;
    border: 1px solid rgb(160, 173, 186);
    border-radius: 3px;
    box-shadow: rgba(48, 54, 60, 0.1) 0px 1px 2px 0px inset;
}
`;

const ButtonGroup = styled.div`
    width: 50%;
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: 0 1rem;
`;

type SingleDropdownHandler = DropdownProps["onChange"];
