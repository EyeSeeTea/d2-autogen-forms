import React, { useEffect, useMemo, useRef, useState } from "react";
import Editor, { Monaco, loader } from "@monaco-editor/react";
import styled from "styled-components";
import { Button } from "@material-ui/core";
import { useAppContext } from "../../contexts/app-context";
import { DataSet } from "../../../domain/autogenerated-forms-configurator/entities/DataSet";
import { CircularProgress } from "material-ui";
import _ from "lodash";
import { ConfiguratorFilter, Filters } from "./Filters";
import { getJsonSchema } from "./schemas";

const AutogeneratedFormConfigurator: React.FC = () => {
    const { compositionRoot } = useAppContext();
    const valueGetter = useRef();

    const [filters, setFilters] = useState(() => getEmptyDataValuesFilter());

    const [dataSets, setDataSets] = useState<DataSet[]>([]);
    const [value, setValue] = useState<string | undefined>();
    const [isJSONValid, setJsonValidity] = useState<boolean>(false);

    const { code, sections } = useMemo(() => {
        const selectedDS = _.find(dataSets, { id: filters.dataSetId });
        if (!selectedDS) return { code: "", sections: [] };

        setValue(!value ? "{}" : value);

        return { code: selectedDS.code, sections: selectedDS.sections };
    }, [dataSets, filters.dataSetId, value]);

    useEffect(() => {
        loader
            .init()
            .then((monaco: Monaco) => {
                const sectionCodes = sections.map(section => section.code);

                monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
                    validate: true,
                    schemas: [getJsonSchema(sectionCodes, code)],
                });
            })
            .catch(error => console.error("An error occurred during initialization of Monaco: ", error));
    }, [code, sections]);

    useEffect(() => {
        compositionRoot.dataStoreConfig.getDataSets().then(dataSets => setDataSets(dataSets));
    }, [compositionRoot.dataStoreConfig]);

    useEffect(() => {
        compositionRoot.dataStoreConfig
            .getFormConfig(code)
            .then(config => code !== "" && setValue(JSON.stringify(config, null, 4)));
    }, [compositionRoot.dataStoreConfig, dataSets, code]);

    function handleEditorValidation(markers: any) {
        if (_.isEmpty(markers)) {
            setJsonValidity(true);
        } else {
            setJsonValidity(false);
        }
    }

    function handleEditorDidMount(_valueGetter: any) {
        valueGetter.current = _valueGetter;
    }

    return (
        <Container>
            <Filters values={filters} onChange={setFilters} options={{ dataSets }} />

            <StyledEditor
                loading={<CircularProgress />}
                height="80vh"
                width="60vw"
                language="json"
                defaultLanguage="json"
                defaultValue="{}"
                value={value}
                onChange={setValue}
                options={{ wordWrap: "on", minimap: { enabled: false } }}
                onValidate={handleEditorValidation}
                beforeMount={handleEditorDidMount}
            />

            <ButtonGroup>
                <Button color="primary" variant="contained" disabled={!filters.dataSetId || !isJSONValid || !value}>
                    Save
                </Button>
                <Button color="default" variant="contained">
                    Cancel
                </Button>
            </ButtonGroup>
        </Container>
    );
};

export default React.memo(AutogeneratedFormConfigurator);

const Container = styled.div`
    padding: 20px;
`;

const StyledEditor = styled(Editor)`
    margin: 40px 0 20px;
    grid-area: auto / 1 / auto / auto;
    padding: 20px;
    border: 1px solid rgb(160, 173, 186);
    border-radius: 3px;
    box-shadow: rgba(48, 54, 60, 0.1) 0px 1px 2px 0px inset;
}
`;

const ButtonGroup = styled.div`
    width: 50%;
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: 0 1rem;
`;

function getEmptyDataValuesFilter(): ConfiguratorFilter {
    return {
        dataSetId: "",
    };
}
