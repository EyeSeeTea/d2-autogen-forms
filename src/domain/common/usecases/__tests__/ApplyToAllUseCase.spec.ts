import { ApplyToAllUseCase } from "../ApplyToAllUseCase";
import { DataValueStore, DataValueTextMultiple } from "../../entities/DataValue";
import { DataValueRepository } from "../../repositories/DataValueRepository";
import { Row } from "../../../../webapp/reports/autogenerated-forms/GridWithTotalsViewModel";
import { mock, instance, when, verify, anything, deepEqual } from "ts-mockito";
import { Dhis2DataValueRepository } from "../../../../data/common/Dhis2DataValueRepository";
import { dataElement, dataValueNumberSingle, dataValueTextMultiple } from "./data/dataValue";

describe("ApplyToAllUseCase", () => {
    let mockDataValueRepository: DataValueRepository;
    let mockDataValueStore: DataValueStore;
    let applyToAllUseCase: ApplyToAllUseCase;

    beforeEach(() => {
        mockDataValueRepository = mock<DataValueRepository>(Dhis2DataValueRepository);
        mockDataValueStore = mock<DataValueStore>(DataValueStore);
        applyToAllUseCase = new ApplyToAllUseCase(instance(mockDataValueRepository));
    });

    it("updates the store with the new values and calls applyToAll on the repository", async () => {
        const row: Row = {
            items: [
                {
                    dataElement: { ...dataElement, id: "de2", code: "de2", name: "Data Element 2", type: "TEXT" },
                    column: {
                        isSourceType: true,
                        name: "",
                    },
                    disabled: false,
                },
            ],
            name: "",
            includePadding: 0,
        };

        const updatedDataValueTextMultiple: DataValueTextMultiple = {
            ...dataValueTextMultiple,
            dataElement: {
                ...dataValueTextMultiple.dataElement,
                id: "de2",
                name: "Data Element 2",
            },
        };

        when(
            mockDataValueStore.get(
                anything(),
                deepEqual({
                    period: dataValueTextMultiple.period,
                    orgUnitId: dataValueTextMultiple.orgUnitId,
                    categoryOptionComboId: dataValueTextMultiple.categoryOptionComboId,
                })
            )
        )
            .thenReturn(dataValueNumberSingle)
            .thenReturn(updatedDataValueTextMultiple);

        when(mockDataValueStore.set(anything())).thenReturn(instance(mockDataValueStore));

        const stubDataValueStore = instance(mockDataValueStore);

        const result = await applyToAllUseCase.execute(stubDataValueStore, dataValueTextMultiple, [], [row]);

        verify(
            mockDataValueRepository.applyToAll(
                deepEqual(dataValueTextMultiple),
                deepEqual([{ id: "de2", name: "Data Element 2" }])
            )
        ).once();
        verify(mockDataValueStore.get(anything(), anything())).twice();
        verify(mockDataValueStore.set(deepEqual(updatedDataValueTextMultiple))).once();
        expect(result).toEqual(stubDataValueStore);
    });
});
