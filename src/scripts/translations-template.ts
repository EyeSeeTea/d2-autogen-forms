import _ from "lodash";
import path from "path";
import { ArgumentParser } from "argparse";

import { getCompositionRoot } from "../compositionRoot";
import { D2Api } from "../types/d2-api";
import xlsx from "@eyeseetea/xlsx-populate";
import { GridWithTotalsViewModel, Row } from "../webapp/reports/autogenerated-forms/GridWithTotalsViewModel";
import { DataForm, DataFormM, SectionGrid } from "../domain/common/entities/DataForm";
import {
    GridWithCombosViewModel,
    Row as RowCombo,
} from "../webapp/reports/autogenerated-forms/GridWithCombosViewModel";
import { Id } from "../domain/common/entities/Base";
import { GridViewModel, Row as RowGrid } from "../webapp/reports/autogenerated-forms/GridFormViewModel";
import { DataValueStore } from "../domain/common/entities/DataValue";
import { DataElement } from "../domain/common/entities/DataElement";

/*
  npx ts-node src/scripts/translations-template.ts \
  -u "user:password" \
  --url "http://localhost:8080" \
  --dataSet "uc8uSqVVt4n" \
  --path "./nhwa_module_1_base.xlsm"
 */

const configModule1: DataSetConfigSheet = {
    "NHWA-M1-S1": {
        sheetName: "Demographic",
        cellRowName: "C",
        cellRowNumber: 8,

        columnName: "E",
        columnStart: 7,
    },
    "NHWA-M1-S3": {
        sheetName: "DemographicsDetailed",
        cellRowName: "C",
        cellRowNumber: 9,

        columnName: "D",
        columnStart: 8,
    },
    "NHWA-M1-S5": {
        sheetName: "CountryOfTraining",
        cellRowName: "C",
        cellRowNumber: 8,

        columnName: "D",
        columnStart: 7,
    },
    "NHWA-M1-S6": {
        sheetName: "FacilityOwnershipAndFacility",
        cellRowName: "C",
        cellRowNumber: 11,

        columnName: "D",
        columnStart: 8,
    },
    "NHWA-M1-S8": {
        sheetName: "Inflows&Outflows",

        cellRowName: "C",
        cellRowNumber: 9,

        columnName: "D",
        columnStart: 8,
    },
    "NHWA-M1-S9": {
        sheetName: "TypeOfContract",
        cellRowName: "C",
        cellRowNumber: 7,

        columnName: "D",
        columnStart: 6,
    },
    "NHWA-M1-S1_2": {
        sheetName: "SourceType",
        cellRowName: "C",
        cellRowNumber: 7,

        columnName: "D",
        columnStart: 6,
    },
};

const configModule2: DataSetConfigSheet = {
    "NHWA-M2-S1": {
        sheetName: "HWFTrainingInputs&Outputs",
        // dataElements rows cells
        cellRowName: "C",
        cellRowNumber: 8,
        // parent columns
        parentColumnName: "D",
        parentColumnStart: 6,
        // columns
        columnName: "D",
        columnStart: 7,
    },
    "NHWA-M2-S2-1": {
        sheetName: "HWFTrainingStandards",
        cellRowName: "C",
        cellRowNumber: 8,

        columnName: "D",
        columnStart: 7,
    },
    "NHWA-M2-S2-2": {
        sheetName: "HWFTrainingStandards",
        cellRowName: "C",
        cellRowNumber: 21,

        columnName: "C",
        columnStart: 20,
    },
    "NHWA-M2-S3": {
        sheetName: "DataSourcesAndOtherResource",
        cellRowName: "C",
        cellRowNumber: 8,

        columnName: "C",
        columnStart: 7,
    },
};

const configModule3: DataSetConfigSheet = {
    "NHWA-M3-S1": {
        sheetName: "ExpenditureAndRemuneration",
        cellRowName: "C",
        cellRowNumber: 8,

        columnName: "D",
        columnStart: 7,
    },
    "NHWA-M3-S2": {
        sheetName: "EducationExpenditure",
        cellRowName: "C",
        cellRowNumber: 9,

        columnName: "D",
        columnStart: 8,
    },
};

const configModule4: DataSetConfigSheet = {
    "NHWA-M4-S1": {
        sheetName: "LabourRegulationsAndPolicies",
        cellRowName: "C",
        cellRowNumber: 7,

        columnName: "D",
        columnStart: 6,
    },
    "NHWA-M4-S2.1": {
        sheetName: "GovernanceAndLeadershipCapacity",
        cellRowName: "C",
        cellRowNumber: 7,

        columnName: "D",
        columnStart: 6,
    },
    "NHWA-M4-S2.2": {
        sheetName: "GovernanceAndLeadershipCapacity",
        cellRowName: "C",
        cellRowNumber: 18,

        columnName: "D",
        columnStart: 17,
    },
    "NHWA-M4-S2.3": {
        sheetName: "GovernanceAndLeadershipCapacity",
        cellRowName: "C",
        cellRowNumber: 24,

        columnName: "D",
        columnStart: 23,
    },
    "NHWA-M4-S3": {
        sheetName: "HrhInformationSystems",
        cellRowName: "C",
        cellRowNumber: 8,

        columnName: "D",
        columnStart: 7,
    },
};

const dataSets: Record<Id, { id: Id; code: string; config: DataSetConfigSheet }> = {
    uc8uSqVVt4n: { id: "uc8uSqVVt4n", code: "NHWA-M1-2023", config: configModule1 },
    n1IjdYSRBJf: { id: "n1IjdYSRBJf", code: "NHWA-M2-2023", config: configModule2 },
    lk60JeHUWzI: { id: "lk60JeHUWzI", code: "NHWA-M3-2023", config: configModule3 },
    C2KobdLTeGa: { id: "C2KobdLTeGa", code: "NHWA-M4-2023", config: configModule4 },
};

async function main() {
    const parser = new ArgumentParser();

    parser.add_argument("-u", "--user-auth", {
        help: "DHIS2 authentication",
        metavar: "USERNAME:PASSWORD",
    });

    parser.add_argument("--url", {
        help: "DHIS2 base URL",
        metavar: "URL",
    });

    parser.add_argument("--path", { help: "path to the json file with all the translations to import" });
    parser.add_argument("--dataSet", { help: "dataSet id" });

    const args = parser.parse_args();

    const dataSet = dataSets[args.dataSet];

    const [username, password] = args.user_auth.split(":", 2);
    if (!username || !password) return;
    if (!args.path) throw Error(`Invalid value for argument --path`);
    if (!dataSet) throw Error(`Invalid value for argument --dataSet: ${args.dataSet}`);

    const api = new D2Api({ baseUrl: args.url, auth: { username, password } });
    const compositionRoot = getCompositionRoot(api);
    const currentUser = await api
        .request<{ keyDbLocale: string }>({
            method: "get",
            url: "/userSettings",
        })
        .getData();

    console.log(`Getting dataSet ${dataSet.id} ...`);
    const orgUnitId = "hmZE3mVAZFf";
    const period = "2022";
    const dataForm = await compositionRoot.dataForms.get({
        dataSetId: dataSet.id,
        period: period,
        orgUnitId: orgUnitId,
    });

    const dataValues = await compositionRoot.dataForms.getValues(dataForm.id, {
        orgUnits: [orgUnitId],
        periods: DataFormM.getReferencedPeriods(dataForm, period),
    });

    await buildExcelWithTranslations(dataForm, dataValues, args.path, dataSet.config, currentUser.keyDbLocale);
}

async function buildExcelWithTranslations(
    dataForm: DataForm,
    dataValues: DataValueStore,
    excelPath: string,
    sectionsConfig: Record<string, SectionSheetConfig>,
    language: string
) {
    const excelFile = await xlsx.fromFileAsync(excelPath);

    _(dataForm.sections)
        .map(section => {
            const config = sectionsConfig[section.code];
            if (!config) return undefined;
            const sheet = excelFile.sheet(config.sheetName);
            if (section.viewType === "grid" || section.viewType === "table") {
                const isGrid = section.viewType === "grid";
                const viewModel = GridViewModel.get(section as SectionGrid, {
                    data: {
                        // @ts-ignore
                        save: () => {},
                        // @ts-ignore
                        saveWithTotals: () => {},
                        // @ts-ignore
                        stApplyToAll: () => {},
                        // @ts-ignore
                        values: dataValues,
                    },
                    categoryOptionComboId: "Xr12mI7VPn3",
                    orgUnitId: "hmZE3mVAZFf",
                    period: "2022",
                    metadata: {
                        dataForm: dataForm,
                    },
                });
                updateCellGrid(
                    isGrid ? viewModel.rows : viewModel.dataElements,
                    sheet,
                    config.cellRowName,
                    config.cellRowNumber
                );
                if (isGrid) {
                    viewModel.columns.forEach((column, columnIndex) => {
                        if (config.columnName && config.columnStart) {
                            const columnName = getColumnIndex(config.columnName) + columnIndex;
                            sheet.row(config.columnStart).cell(columnName).value(column.name);
                        }
                    });
                } else {
                    viewModel.dataElements.forEach((column, columnIndex) => {
                        if (config.columnName && config.columnStart) {
                            const columnName = getColumnIndex(config.columnName) + columnIndex;
                            sheet.row(config.columnStart).cell(columnName).value(column.name);
                        }
                    });
                }
                return { ...section, viewModel };
            } else if (section.viewType === "grid-with-combos") {
                const viewModel = GridWithCombosViewModel.get(section);
                updateCellCategories(viewModel.rows, sheet, config.cellRowName, config.cellRowNumber);
                viewModel.parentColumns.forEach((column, columnIndex) => {
                    if (config.parentColumnName && config.parentColumnStart) {
                        const columnName = getColumnIndex(config.parentColumnName) + columnIndex;
                        sheet.row(config.parentColumnStart).cell(columnName).value(column.name);
                    }
                });
                viewModel.columns.forEach((column, columnIndex) => {
                    if (config.columnName && config.columnStart) {
                        const columnName = getColumnIndex(config.columnName) + columnIndex;
                        sheet.row(config.columnStart).cell(columnName).value(column.cocName);
                    }
                });
                return { ...section, viewModel };
            } else if (section.viewType === "grid-with-totals") {
                const viewModel = GridWithTotalsViewModel.get(
                    section,
                    dataForm.dataElements,
                    dataForm.options.dataElements
                );
                updateCellNames(viewModel.rows, sheet, config.cellRowName, config.cellRowNumber);
                if (config.sheetName.toLowerCase() === "demographic") {
                    const sourceTypeSheet = excelFile.sheet("SourceType");
                    updateCellNames(viewModel.rows, sourceTypeSheet, "C", 7);
                }
                return { ...section, viewModel };
            } else {
                return undefined;
            }
        })
        .compact()
        .value();

    await saveExcelFile(excelFile, addLanguageToFileName(excelPath, language));
}

async function saveExcelFile(excelFile: xlsx.Workbook, outputFileName: string) {
    await excelFile.toFileAsync(outputFileName);
    console.log(`Excel file saved as ${outputFileName}`);
}

function getColumnIndex(column: string): number {
    return Array.from(column.toUpperCase()).reduce((acc, char) => {
        return char.charCodeAt(0) - 64 + acc * 26;
    }, 0);
}

function updateCellGrid(
    rows: RowGrid[] | DataElement[],
    sheet: xlsx.Sheet,
    cellColumn: string,
    startRowNumber: number
) {
    rows.forEach((row, rowIndex) => {
        sheet
            .row(rowIndex + startRowNumber)
            .cell(cellColumn)
            .value(row.name);
    });
}

function updateCellCategories(rows: RowCombo[], sheet: xlsx.Sheet, cellColumn: string, startRowNumber: number) {
    rows.forEach((row, rowIndex) => {
        sheet
            .row(rowIndex + startRowNumber)
            .cell(cellColumn)
            .value(extractLastPart(row.name));
    });
}

function extractLastPart(value: string) {
    const lastPart = value.replace(/^[\d.]+\s*/, "");
    return lastPart;
}

function updateCellNames(gridRows: Row[], sheet: xlsx.Sheet, cellColumn: string, startRowNumber: number) {
    gridRows.forEach((row, rowIndex) => {
        const rowName = row.name.split(" - ")[1];
        const rowWithSpace = row.includePadding ? `${" ".repeat(5 * row.includePadding)} ${rowName}` : rowName;

        sheet
            .row(rowIndex + startRowNumber)
            .cell(cellColumn)
            .value(rowWithSpace);
    });
}

function addLanguageToFileName(filePath: string, suffix: string) {
    const dir = path.dirname(filePath);
    const fileName = path.basename(filePath, path.extname(filePath));
    const ext = path.extname(filePath);
    const newFileName = `${fileName}_${suffix}${ext}`;
    return path.join(dir, newFileName);
}

main();

type DataSetConfigSheet = Record<string, SectionSheetConfig>;
type SectionSheetConfig = {
    sheetName: string;

    cellRowName: string;
    cellRowNumber: number;

    parentColumnName?: string;
    parentColumnStart?: number;

    columnName: string;
    columnStart: number;
};
